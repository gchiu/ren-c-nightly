name: "Release"

on:
  push:
    branches:
      - '**'
      - actions
  pull_request:
    branches:
      - '*'
  # schedule:
  #   - cron: '0 0 * * *'

env:
  app-name: r3

defaults:
  run:
    shell: bash -l {0}

jobs:
  unix:
    timeout-minutes: 20
    name: "Package *nix"
    runs-on: ${{ matrix.os }}
    env:
      LANGUAGE: en_US.UTF-8
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        include:
          - os: ubuntu-latest
            binary: linux-x64
          - os: macos-latest
            binary: osx-x64
          - os: windows-latest
            binary: windows-x86
    steps:
      - name: Disable LF to CRLF Auto Translation in Git
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
      - name: Checkout
        uses: actions/checkout@main
        with:
          repository: metaeducation/ren-c
          submodules: recursive
      - name: Get current date
        run: echo $(date -u "+%F") >> currentDate
      - name: Read date
        uses: pCYSl5EDgo/cat@master
        id: currentDate
        with:
          path: currentDate
          trim: true
      - name: (Linux-only) Set Locale and SHELL
        if: ${{ runner.os == 'Linux' }}
        run: |
          locale-gen en_US.UTF-8
          sudo dpkg-reconfigure locales

          echo "SHELL=/bin/bash" >> $GITHUB_ENV
          echo "EXTENSION=" >> $GITHUB_ENV
      - name: (Windows-only) Install Wget
        if: ${{ runner.os == 'Windows' }}
        run: |
          choco install -y wget
          echo "EXTENSION=.exe" >> $GITHUB_ENV
      - name: (Macos-only)
        if: ${{ runner.os == 'Macos' }}
        run: |
          echo "EXTENSION=" >> $GITHUB_ENV
      - name: Download prebuilt
        run: |
          binary=$(cat prebuilt/README.md | grep -i ${{ matrix.binary }})
          wget -O prebuilt/r3$EXTENSION "$binary"
          chmod +x prebuilt/r3$EXTENSION
      - name: Build Ren-C
        run: |
          mkdir -p build
          cd build && ../prebuilt/r3$EXTENSION ../make.r config: ../configs/default-config.r debug: asserts optimize: 2
          ls -la
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        if: ${{ runner.os != 'Windows' }}
        with:
          name: ${{ env.app-name }}-${{ steps.currentDate.outputs.text }}-${{ matrix.binary }}
          path: build/r3
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        if: ${{ runner.os == 'Windows' }}
        with:
          name: ${{ env.app-name }}-${{ steps.currentDate.outputs.text }}-${{ matrix.binary }}.exe
          path: build/r3.exe

  upload:
    timeout-minutes: 15
    name: "Upload"
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - unix
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: ./assets
      - name: Display structure of downloaded files
        run: ls -R
      - name: Get current date
        run: echo $(date -u "+%F") >> currentDate
      - name: Read date
        uses: pCYSl5EDgo/cat@master
        id: currentDate
        with:
          path: currentDate
          trim: true
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: tag-${{ steps.currentDate.outputs.text }}
          release_name: Latest nightly @ ${{ steps.currentDate.outputs.text }}
          body: |
            Nightly build on ${{ steps.currentDate.outputs.text }}
          draft: false
          prerelease: false
      - name: Upload Release Assets
        id: upload-release-assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create-release.outputs.id }}
          assets_path: ./assets
